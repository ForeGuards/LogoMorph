apiVersion: apps/v1
kind: Deployment
metadata:
  name: logomorph-backend
  namespace: logomorph
  labels:
    app: logomorph
    component: backend
    version: v1
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: logomorph
      component: backend
  template:
    metadata:
      labels:
        app: logomorph
        component: backend
        version: v1
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "4000"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: logomorph-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      
      containers:
      - name: backend
        image: logomorph/backend:latest
        imagePullPolicy: Always
        
        ports:
        - name: http
          containerPort: 4000
          protocol: TCP
        
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "4000"
        
        # Secrets from ConfigMap
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: logomorph-config
              key: redis-host
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: logomorph-config
              key: redis-port
        
        # Secrets from Secret
        - name: CONVEX_URL
          valueFrom:
            secretKeyRef:
              name: logomorph-secrets
              key: convex-url
        - name: CLERK_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: logomorph-secrets
              key: clerk-secret-key
        - name: CLERK_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: logomorph-secrets
              key: clerk-webhook-secret
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: logomorph-secrets
              key: aws-access-key-id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: logomorph-secrets
              key: aws-secret-access-key
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        
        # Liveness probe - restart if unhealthy
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 3
        
        # Readiness probe - remove from load balancer if not ready
        readinessProbe:
          httpGet:
            path: /health/ready
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        
        # Startup probe - give app time to start
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
        
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
          capabilities:
            drop:
            - ALL
        
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/.cache
      
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: component
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname

---
apiVersion: v1
kind: Service
metadata:
  name: logomorph-backend
  namespace: logomorph
  labels:
    app: logomorph
    component: backend
spec:
  type: ClusterIP
  selector:
    app: logomorph
    component: backend
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  sessionAffinity: None

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: logomorph-backend
  namespace: logomorph
  labels:
    app: logomorph
    component: backend
